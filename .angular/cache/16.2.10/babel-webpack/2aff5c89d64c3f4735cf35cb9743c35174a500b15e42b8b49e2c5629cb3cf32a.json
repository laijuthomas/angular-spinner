{"ast":null,"code":"import { AngularSpinnerComponent } from './spinner.component';\nimport * as i0 from \"@angular/core\";\nexport class AngularSpinnerDirective {\n  /**\n   * Directive value - show or hide spinner\n   */\n  set appSpinner(val) {\n    if (this.componentFactory) {\n      if (val) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    } else {\n      this.shouldShow = val;\n    }\n  }\n  constructor(directiveView, componentFactoryResolver, renderer, directiveElement) {\n    this.directiveView = directiveView;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.renderer = renderer;\n    this.directiveElement = directiveElement;\n    this.isSpinnerExist = false;\n    this.shouldShow = false;\n  }\n  ngOnInit() {\n    this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(AngularSpinnerComponent);\n    if (this.shouldShow) {\n      this.show();\n    }\n  }\n  hide() {\n    if (this.isSpinnerExist) {\n      this.directiveView.remove();\n      this.isSpinnerExist = false;\n    }\n  }\n  show() {\n    if (!this.isSpinnerExist) {\n      this.spinner = this.directiveView.createComponent(this.componentFactory);\n      this.setInstanceInputs(this.spinner.instance);\n      this.spinner.changeDetectorRef.detectChanges();\n      this.renderer.appendChild(this.directiveElement.nativeElement, this.spinner.location.nativeElement);\n      this.isSpinnerExist = true;\n    }\n  }\n  setInstanceInputs(instance) {\n    if (typeof this.spinnerMessage !== 'undefined') {\n      instance.message = this.spinnerMessage;\n    }\n    if (typeof this.spinnerStatus !== 'undefined') {\n      instance.status = this.spinnerStatus;\n    }\n    if (typeof this.spinnerSize !== 'undefined') {\n      instance.size = this.spinnerSize;\n    }\n  }\n  static #_ = this.ɵfac = function AngularSpinnerDirective_Factory(t) {\n    return new (t || AngularSpinnerDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AngularSpinnerDirective,\n    selectors: [[\"\", \"angularSpinner\", \"\"]],\n    hostVars: 2,\n    hostBindings: function AngularSpinnerDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"spinner-container\", ctx.isSpinnerExist);\n      }\n    },\n    inputs: {\n      spinnerMessage: \"spinnerMessage\",\n      spinnerStatus: \"spinnerStatus\",\n      spinnerSize: \"spinnerSize\",\n      appSpinner: [\"angularSpinner\", \"appSpinner\"]\n    }\n  });\n}","map":{"version":3,"names":["AngularSpinnerComponent","AngularSpinnerDirective","appSpinner","val","componentFactory","show","hide","shouldShow","constructor","directiveView","componentFactoryResolver","renderer","directiveElement","isSpinnerExist","ngOnInit","resolveComponentFactory","remove","spinner","createComponent","setInstanceInputs","instance","changeDetectorRef","detectChanges","appendChild","nativeElement","location","spinnerMessage","message","spinnerStatus","status","spinnerSize","size","_","i0","ɵɵdirectiveInject","ViewContainerRef","ComponentFactoryResolver","Renderer2","ElementRef","_2","selectors","hostVars","hostBindings","AngularSpinnerDirective_HostBindings","rf","ctx"],"sources":["/Users/fayamac/Projects/angular-spinner/projects/angular-spinner/src/lib/spinner.directive.ts"],"sourcesContent":["\nimport {\n  ComponentFactoryResolver,\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  Renderer2,\n  ViewContainerRef, HostBinding,\n} from '@angular/core';\n\nimport { AngularSpinnerComponent } from './spinner.component';\n\n@Directive({ selector: '[angularSpinner]' })\nexport class AngularSpinnerDirective implements OnInit {\n\n  spinner: ComponentRef<AngularSpinnerComponent>;\n  componentFactory: ComponentFactory<AngularSpinnerComponent>;\n\n  @HostBinding('class.spinner-container') isSpinnerExist = false;\n\n  /**\n   * Spinner message shown next to the icon\n   */\n  @Input() spinnerMessage: string;\n\n  /**\n   * Spinner status color active, disabled, primary, info, success, warning, danger\n   */\n  @Input() spinnerStatus: string;\n\n  /**\n   * Spinner size, available sizes: xxsmall, xsmall, small, medium, large, xlarge, xxlarge\n   */\n  @Input() spinnerSize: string;\n\n  /**\n   * Directive value - show or hide spinner\n   */\n  @Input('angularSpinner')\n  set appSpinner(val: boolean) {\n    if (this.componentFactory) {\n      if (val) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    } else {\n      this.shouldShow = val;\n    }\n  }\n\n  private shouldShow = false;\n\n  constructor(private directiveView: ViewContainerRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private renderer: Renderer2,\n    private directiveElement: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(AngularSpinnerComponent);\n    if (this.shouldShow) {\n      this.show();\n    }\n  }\n\n  hide() {\n    if (this.isSpinnerExist) {\n      this.directiveView.remove();\n      this.isSpinnerExist = false;\n    }\n  }\n\n  show() {\n    if (!this.isSpinnerExist) {\n      this.spinner = this.directiveView.createComponent<AngularSpinnerComponent>(this.componentFactory);\n      this.setInstanceInputs(this.spinner.instance);\n      this.spinner.changeDetectorRef.detectChanges();\n      this.renderer.appendChild(this.directiveElement.nativeElement, this.spinner.location.nativeElement);\n      this.isSpinnerExist = true;\n    }\n  }\n\n  setInstanceInputs(instance: AngularSpinnerComponent) {\n    if (typeof this.spinnerMessage !== 'undefined') {\n      instance.message = this.spinnerMessage;\n    }\n    if (typeof this.spinnerStatus !== 'undefined') {\n      instance.status = this.spinnerStatus;\n    }\n    if (typeof this.spinnerSize !== 'undefined') {\n      instance.size = this.spinnerSize;\n    }\n  }\n}\n"],"mappings":"AAaA,SAASA,uBAAuB,QAAQ,qBAAqB;;AAG7D,OAAM,MAAOC,uBAAuB;EAsBlC;;;EAGA,IACIC,UAAUA,CAACC,GAAY;IACzB,IAAI,IAAI,CAACC,gBAAgB,EAAE;MACzB,IAAID,GAAG,EAAE;QACP,IAAI,CAACE,IAAI,EAAE;OACZ,MAAM;QACL,IAAI,CAACC,IAAI,EAAE;;KAEd,MAAM;MACL,IAAI,CAACC,UAAU,GAAGJ,GAAG;;EAEzB;EAIAK,YAAoBC,aAA+B,EACzCC,wBAAkD,EAClDC,QAAmB,EACnBC,gBAA4B;IAHlB,KAAAH,aAAa,GAAbA,aAAa;IACvB,KAAAC,wBAAwB,GAAxBA,wBAAwB;IACxB,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAtCc,KAAAC,cAAc,GAAG,KAAK;IAiCtD,KAAAN,UAAU,GAAG,KAAK;EAM1B;EAEAO,QAAQA,CAAA;IACN,IAAI,CAACV,gBAAgB,GAAG,IAAI,CAACM,wBAAwB,CAACK,uBAAuB,CAACf,uBAAuB,CAAC;IACtG,IAAI,IAAI,CAACO,UAAU,EAAE;MACnB,IAAI,CAACF,IAAI,EAAE;;EAEf;EAEAC,IAAIA,CAAA;IACF,IAAI,IAAI,CAACO,cAAc,EAAE;MACvB,IAAI,CAACJ,aAAa,CAACO,MAAM,EAAE;MAC3B,IAAI,CAACH,cAAc,GAAG,KAAK;;EAE/B;EAEAR,IAAIA,CAAA;IACF,IAAI,CAAC,IAAI,CAACQ,cAAc,EAAE;MACxB,IAAI,CAACI,OAAO,GAAG,IAAI,CAACR,aAAa,CAACS,eAAe,CAA0B,IAAI,CAACd,gBAAgB,CAAC;MACjG,IAAI,CAACe,iBAAiB,CAAC,IAAI,CAACF,OAAO,CAACG,QAAQ,CAAC;MAC7C,IAAI,CAACH,OAAO,CAACI,iBAAiB,CAACC,aAAa,EAAE;MAC9C,IAAI,CAACX,QAAQ,CAACY,WAAW,CAAC,IAAI,CAACX,gBAAgB,CAACY,aAAa,EAAE,IAAI,CAACP,OAAO,CAACQ,QAAQ,CAACD,aAAa,CAAC;MACnG,IAAI,CAACX,cAAc,GAAG,IAAI;;EAE9B;EAEAM,iBAAiBA,CAACC,QAAiC;IACjD,IAAI,OAAO,IAAI,CAACM,cAAc,KAAK,WAAW,EAAE;MAC9CN,QAAQ,CAACO,OAAO,GAAG,IAAI,CAACD,cAAc;;IAExC,IAAI,OAAO,IAAI,CAACE,aAAa,KAAK,WAAW,EAAE;MAC7CR,QAAQ,CAACS,MAAM,GAAG,IAAI,CAACD,aAAa;;IAEtC,IAAI,OAAO,IAAI,CAACE,WAAW,KAAK,WAAW,EAAE;MAC3CV,QAAQ,CAACW,IAAI,GAAG,IAAI,CAACD,WAAW;;EAEpC;EAAC,QAAAE,CAAA,G;qBAhFU/B,uBAAuB,EAAAgC,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,gBAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAG,wBAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAI,SAAA,GAAAJ,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAK,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAvBtC,uBAAuB;IAAAuC,SAAA;IAAAC,QAAA;IAAAC,YAAA,WAAAC,qCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}